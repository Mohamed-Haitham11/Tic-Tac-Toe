name: TicTacToe Qt CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt dependencies
      run: |
        # Update package list and install essential build tools and Qt development libraries
        sudo apt-get update
        sudo apt-get install -y build-essential qtbase5-dev libqt5sql5-sqlite

    - name: Generate Makefile using qmake
      # qmake reads your project file (.pro) and generates a Makefile
      # Assumes your .pro file (Patience.pro) is in the root directory.
      run: qmake Patience.pro

    - name: Build project
      # make compiles the source files, links libraries, and creates the executable
      run: make

    - name: Run simple test (optional, for CLI applications)
      # For a GUI application like TicTacToe, a simple execution might not
      # fully test functionality. Automated UI tests would be more comprehensive.
      # The '|| true' ensures the CI step doesn't fail if the app exits non-zero,
      # which can happen with GUI apps that don't have a clean exit for CI.
      # Remove '|| true' if you expect a specific exit code for success.
      run: ./tictactoe || true

    - name: Upload built binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: tictactoe-qt-build
        path: tictactoe # The name of your executable generated by 'make'
        # Ensure this path matches the actual output filename.

  release:
    # This job depends on the 'build' job completing successfully
    needs: build
    # This job only runs when code is pushed to the 'main' branch (not on pull requests)
    # and only if the 'build' job was successful.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest

    permissions:
      contents: write # This permission is required to create a GitHub Release

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download built binary artifact
      uses: actions/download-artifact@v4
      with:
        name: tictactoe-qt-build # Name of the artifact uploaded in the 'build' job
        path: . # Download to the current working directory

    - name: Get current date for release tag
      id: date
      run: echo "RELEASE_DATE=$(date +'%Y.%m.%d-%H%M')" >> "$GITHUB_OUTPUT"

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        # Generate a unique tag based on the push SHA and date
        tag_name: v${{ steps.date.outputs.RELEASE_DATE }}-${{ github.sha }}
        name: Release ${{ steps.date.outputs.RELEASE_DATE }}
        body: |
          Automated release of the TicTacToe Qt application.
          This release contains the binary built from commit ${{ github.sha }}.
        draft: false # Set to true if you want to manually publish later
        prerelease: false # Set to true for pre-release versions

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./tictactoe # Path to the executable downloaded earlier
        asset_name: tictactoe-ubuntu-latest # Name of the asset in the release
        asset_content_type: application/octet-stream # Standard content type for executables
